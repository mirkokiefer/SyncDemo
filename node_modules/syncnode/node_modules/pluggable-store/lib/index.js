// Generated by CoffeeScript 1.4.0
(function() {
  var PluggableStore, async, wrapAdapter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  async = require('async');

  PluggableStore = (function(_super) {

    __extends(PluggableStore, _super);

    function PluggableStore(_arg) {
      this.adapter = _arg.adapter;
    }

    PluggableStore.prototype.exists = function(cb) {
      return this.adapter.exists(cb);
    };

    PluggableStore.prototype.create = function(cb) {
      return this.adapter.create(cb);
    };

    PluggableStore.prototype.destroy = function(cb) {
      return this.adapter.destroy(cb);
    };

    PluggableStore.prototype.ensureExists = function(cb) {
      var obj;
      obj = this;
      return this.exists(function(err, created) {
        if (created) {
          return cb(null);
        } else {
          return obj.create(cb);
        }
      });
    };

    PluggableStore.prototype.write = function(key, value, cb) {
      var obj;
      obj = this;
      this.emit('write', key, value);
      return this.adapter.write(key, value, function(err, res) {
        obj.emit('written', key, value);
        return cb(err, res);
      });
    };

    PluggableStore.prototype.read = function(key, cb) {
      this.emit('read', key);
      return this.adapter.read(key, cb);
    };

    PluggableStore.prototype.remove = function(key, cb) {
      return this.adapter.remove(key, cb);
    };

    PluggableStore.prototype.readAll = function(keys, cb) {
      var obj;
      obj = this;
      return async.map(keys, (function(each, cb) {
        return obj.read(each, cb);
      }), cb);
    };

    PluggableStore.prototype.writeAll = function(keyValues, cb) {
      var obj;
      obj = this;
      return async.map(keyValues, (function(_arg, cb) {
        var key, value;
        key = _arg.key, value = _arg.value;
        return obj.write(key, value, cb);
      }), cb);
    };

    PluggableStore.prototype.removeAll = function(keys, cb) {
      var obj;
      obj = this;
      return async.map(keys, (function(each, cb) {
        return obj.remove(each, cb);
      }), cb);
    };

    PluggableStore.prototype.keys = function(cb) {
      return this.adapter.keys(cb);
    };

    PluggableStore.prototype.pipe = function(toStore) {
      return this.on('write', function(key, value) {
        return toStore.write(key, value, function() {});
      });
    };

    return PluggableStore;

  })(require('eventemitter2').EventEmitter2);

  wrapAdapter = function(requireFun) {
    return function() {
      var adapter, args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      adapter = requireFun();
      return new PluggableStore({
        adapter: (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(adapter, args, function(){})
      });
    };
  };

  PluggableStore.browser = {
    localStorage: wrapAdapter(function() {
      return require('./localstorage');
    })
  };

  PluggableStore.server = {
    fileSystem: wrapAdapter(function() {
      return require('./filesystem');
    })
  };

  PluggableStore.memory = wrapAdapter(function() {
    return require('./memory');
  });

  module.exports = PluggableStore;

}).call(this);
