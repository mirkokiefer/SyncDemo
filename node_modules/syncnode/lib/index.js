// Generated by CoffeeScript 1.4.0
(function() {
  var PluggableStore, Repository, async, contentAddressable, createApp, createFileStore, createMemoryStore, express, synclib, _;

  express = require('express');

  _ = require('underscore');

  async = require('async');

  contentAddressable = require('content-addressable');

  PluggableStore = require('pluggable-store');

  createMemoryStore = PluggableStore.memory;

  createFileStore = PluggableStore.server.fileSystem;

  Repository = (synclib = require('synclib')).Repository;

  createApp = function(_arg) {
    var app, blobStore, headStore, repository, _ref, _ref1;
    _ref = _arg != null ? _arg : {}, blobStore = _ref.blobStore, repository = _ref.repository, headStore = _ref.headStore;
    app = express();
    app.blobStore = blobStore ? blobStore : contentAddressable.memory();
    app.repository = repository ? repository : new Repository();
    app.headStore = headStore ? headStore : createMemoryStore();
    _ref1 = [app.blobStore, app.repository, app.headStore], blobStore = _ref1[0], repository = _ref1[1], headStore = _ref1[2];
    app.configure(function() {
      app.use(express.cookieParser());
      app.use(express.cookieSession({
        secret: 'SyncStore'
      }));
      app.use(express.bodyParser());
      app.use(express.methodOverride());
      app.use(express.query());
      return app.use(app.router);
    });
    app.configure('development', function() {
      return app.use(express.errorHandler({
        dumpExceptions: true,
        showStack: true
      }));
    });
    app.configure('production', function() {
      return app.use(express.errorHandler());
    });
    app.get('/', function(req, res) {
      return res.send({
        ok: 'SyncStore is running'
      });
    });
    app.get('/changes', function(req, res) {});
    app.get('/delta', function(req, res) {
      var each, from, to, _ref2;
      _ref2 = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = [req.query.from, req.query.to];
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          each = _ref2[_i];
          if (each) {
            _results.push(JSON.parse(each));
          } else {
            _results.push([]);
          }
        }
        return _results;
      })(), from = _ref2[0], to = _ref2[1];
      return repository.delta({
        from: from,
        to: to
      }, function(err, delta) {
        return res.send(delta);
      });
    });
    app.post('/delta', function(req, res) {
      return repository.applyDelta(req.body, function() {
        return res.send({
          ok: 'success'
        });
      });
    });
    app.put('/head/:branch', function(req, res) {
      return headStore.write(req.params.branch, req.body.hash, function() {
        return res.send({
          ok: 'success'
        });
      });
    });
    app.get('/head', function(req, res) {
      return headStore.keys(function(err, keys) {
        return async.map(keys, (function(each, cb) {
          return headStore.read(each, cb);
        }), function(err, heads) {
          var each, i;
          return res.send({
            heads: (function() {
              var _i, _len, _results;
              _results = [];
              for (i = _i = 0, _len = heads.length; _i < _len; i = ++_i) {
                each = heads[i];
                _results.push({
                  name: keys[i],
                  head: each
                });
              }
              return _results;
            })()
          });
        });
      });
    });
    app.get('/head/:branch', function(req, res) {
      return headStore.read(req.params.branch, function(err, head) {
        return res.send({
          hash: head
        });
      });
    });
    app.post('/blob', function(req, res) {
      return blobStore.write(JSON.stringify(req.body), function(err, hash) {
        return res.send({
          hash: hash
        });
      });
    });
    app.get('/blob/:hash', function(req, res) {
      return blobStore.read(req.params.hash, function(err, data) {
        return res.send(JSON.parse(data));
      });
    });
    return app;
  };

  createApp.synclib = synclib;

  module.exports = createApp;

}).call(this);
