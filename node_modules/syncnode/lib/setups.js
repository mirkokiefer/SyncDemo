// Generated by CoffeeScript 1.3.3
(function() {
  var ContentAddressable, Repository, async, cache, fs, memory, server, synclib, _ref;

  _ref = require('pluggable-store'), memory = _ref.memory, server = _ref.server;

  Repository = (synclib = require('synclib')).Repository;

  ContentAddressable = require('content-addressable');

  cache = require('pluggable-cache');

  fs = require('fs');

  async = require('async');

  module.exports = {
    memory: function() {
      return {
        repository: new Repository(),
        blobStore: ContentAddressable.memory(),
        headStore: memory()
      };
    },
    fileSystem: function(path, cb) {
      var blobStore, cachingCAStore, cachingStore, commitStore, headStore, initStores, repository, treeStore, _ref1;
      cache = require('pluggable-cache');
      cachingStore = function(name) {
        return cache({
          cache: memory(),
          persistence: server.fileSystem(path + '/' + name)
        });
      };
      cachingCAStore = function(name) {
        return new ContentAddressable({
          store: cachingStore(name)
        });
      };
      _ref1 = ['commits', 'trees'].map(cachingCAStore), commitStore = _ref1[0], treeStore = _ref1[1];
      headStore = cachingStore('heads');
      blobStore = new ContentAddressable({
        store: server.fileSystem(path + '/' + 'blobs')
      });
      repository = new synclib.Repository({
        commitStore: commitStore,
        treeStore: treeStore
      });
      initStores = function(cb) {
        return fs.mkdir(path, function() {
          return async.map([commitStore.store, treeStore.store, headStore, blobStore.store], (function(each, cb) {
            return each.ensureExists(cb);
          }), cb);
        });
      };
      return initStores(function() {
        return cb(null, {
          repository: repository,
          blobStore: blobStore,
          headStore: headStore
        });
      });
    }
  };

}).call(this);
