// Generated by CoffeeScript 1.3.3
(function() {
  var Client, Repository, TreeStore, app, assert, backend, client1, client2, contentAddressable, createApp, dataA, dataB, difference, req, testPort, url, values, _ref, _ref1;

  assert = require('assert');

  req = require('superagent');

  _ref = require('synclib'), Repository = _ref.Repository, TreeStore = _ref.TreeStore, backend = _ref.backend;

  contentAddressable = require('content-addressable');

  createApp = require('../lib/index');

  _ref1 = require('underscore'), difference = _ref1.difference, values = _ref1.values;

  testPort = 3001;

  url = function(path) {
    return 'http://localhost:' + testPort + path;
  };

  app = createApp();

  Client = (function() {

    function Client() {
      this.blobStore = contentAddressable.memory();
      this.repo = new Repository();
      this.branch = this.repo.branch();
      this.remotes = {};
    }

    return Client;

  })();

  client1 = new Client();

  client2 = new Client();

  dataA = [
    {
      'a': "hashA 0.0",
      'b/c': "hashA 0.1",
      'b/d': "hashA 0.2"
    }, {
      'a': "hashA 1.0",
      'b/c': "hashA 1.1",
      'b/e': "hashA 1.2",
      'b/f/g': "hashA 1.3"
    }, {
      'b/e': "hashA 2.0"
    }
  ];

  dataB = [
    {
      'b/h': "hashB 0.0"
    }, {
      'c/a': "hashB 1.0"
    }, {
      'a': "hashB 2.0",
      'u': "hashB 2.1"
    }, {
      'b/c': "hashB 3.0",
      'b/e': "hashB 3.1",
      'b/f/a': "hashB 3.2"
    }
  ];

  before(function(done) {
    return app.listen(testPort, 'localhost', done);
  });

  describe('http-interface', function() {
    describe('blob storage', function() {
      return it('should POST some data and return the hash to GET it', function(done) {
        var data;
        data = {
          data: "some data"
        };
        return req.post(url('/blob')).send(data).end(function(res) {
          var hash;
          hash = res.body.hash;
          return req.get(url('/blob/' + hash)).end(function(res) {
            assert.equal(res.body.data, data.data);
            return done();
          });
        });
      });
    });
    describe('client1', function() {
      it('should do some local commits and POST the diff to the server', function(done) {
        var diff, diffHashs, each, _i, _len;
        for (_i = 0, _len = dataA.length; _i < _len; _i++) {
          each = dataA[_i];
          client1.branch.commit(each);
        }
        diffHashs = client1.branch.deltaHashs();
        diff = client1.repo.deltaData(diffHashs);
        return req.post(url('/delta')).send(diff).end(function(res) {
          var i, _j, _len1, _ref2;
          _ref2 = res.body.treeHashs;
          for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
            each = _ref2[i];
            assert.equal(each, diffHashs.trees[i]);
          }
          client1.remotes.client1 = client1.branch.head;
          return done();
        });
      });
      return it('should set its head on the server', function(done) {
        return req.put(url('/head/client1')).send({
          hash: client1.branch.head
        }).end(function(res) {
          return req.get(url('/head/client1')).end(function(res) {
            assert.equal(res.body.hash, client1.branch.head);
            return done();
          });
        });
      });
    });
    describe('client2', function() {
      it('should do some commits and push the diff', function(done) {
        var diff, each, _i, _len;
        for (_i = 0, _len = dataB.length; _i < _len; _i++) {
          each = dataB[_i];
          client2.branch.commit(each);
        }
        diff = client2.repo.deltaData(client2.branch.deltaHashs());
        return req.post(url('/delta')).send(diff).end(function() {
          client2.remotes.client2 = client2.branch.head;
          return done();
        });
      });
      it('should ask for client1\'s head', function(done) {
        return req.get(url('/head/client1')).end(function(res) {
          client2.remotes.client1 = res.body.hash;
          return done();
        });
      });
      it('should ask for the delta to client1 head', function(done) {
        var each, from, to, _ref2;
        _ref2 = (function() {
          var _i, _len, _ref2, _results;
          _ref2 = [[client2.remotes.client2], [client2.remotes.client1]];
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            each = _ref2[_i];
            _results.push(JSON.stringify(each));
          }
          return _results;
        })(), from = _ref2[0], to = _ref2[1];
        return req.get(url('/delta?from=' + from + '&to=' + to)).end(function(res) {
          client2.repo.treeStore.writeAll(res.body.trees);
          client2.repo.commitStore.writeAll(res.body.commits);
          return done();
        });
      });
      it('should do a local merge of client1s diff', function() {
        var head, headObj, oldHead;
        oldHead = client2.branch.head;
        head = client2.branch.merge({
          ref: client2.remotes.client1
        });
        headObj = client2.repo._commitStore.read(head);
        return assert.equal(difference(headObj.ancestors, [client2.remotes.client1, oldHead]).length, 0);
      });
      it('should push its new diff to the server', function(done) {
        var delta, deltaData;
        delta = client2.branch.deltaHashs({
          from: values(client2.remotes)
        });
        deltaData = client2.repo.deltaData(delta);
        return req.post(url('/delta')).send(deltaData).end(function() {
          client2.remotes.client2 = client2.branch.head;
          return done();
        });
      });
      return it('should update its head on the server', function(done) {
        return req.put(url('/head/client2')).send({
          hash: client2.branch.head
        }).end(function(res) {
          return done();
        });
      });
    });
    return describe('client1 - step 2', function() {
      it('should ask for client2 head and fetch the delta', function(done) {
        return req.get(url('/head/client2')).end(function(res) {
          var each, from, to, _ref2;
          client1.remotes.client2 = res.body.hash;
          _ref2 = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = [[client1.remotes.client1], [client1.remotes.client2]];
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              each = _ref2[_i];
              _results.push(JSON.stringify(each));
            }
            return _results;
          })(), from = _ref2[0], to = _ref2[1];
          return req.get(url('/delta?from=' + from + '&to=' + to)).end(function(res) {
            client1.repo.treeStore.writeAll(res.body.trees);
            client1.repo.commitStore.writeAll(res.body.commits);
            return done();
          });
        });
      });
      it('does a local fast-forward merge', function() {
        var head;
        head = client1.branch.merge({
          ref: client1.remotes.client2
        });
        return assert.equal(head, client1.remotes.client2);
      });
      return it('fetches all client heads', function(done) {
        return req.get(url('/head')).end(function(res) {
          assert.equal(res.body.heads[0].name, 'client1');
          return done();
        });
      });
    });
  });

}).call(this);
