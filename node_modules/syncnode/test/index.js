// Generated by CoffeeScript 1.3.3
(function() {
  var Client, Repository, TreeStore, app, assert, async, backend, client1, client2, contentAddressable, createApp, dataA, dataB, difference, req, testPort, url, values, _ref, _ref1;

  assert = require('assert');

  req = require('superagent');

  _ref = require('synclib'), Repository = _ref.Repository, TreeStore = _ref.TreeStore, backend = _ref.backend;

  contentAddressable = require('content-addressable');

  createApp = require('../lib/index');

  _ref1 = require('underscore'), difference = _ref1.difference, values = _ref1.values;

  async = require('async');

  testPort = 3001;

  url = function(path) {
    return 'http://localhost:' + testPort + path;
  };

  app = createApp();

  Client = (function() {

    function Client() {
      this.blobStore = contentAddressable.memory();
      this.repo = new Repository();
      this.branch = this.repo.branch();
      this.remotes = {};
    }

    return Client;

  })();

  client1 = new Client();

  client2 = new Client();

  dataA = [
    {
      'a': "hashA 0.0",
      'b/c': "hashA 0.1",
      'b/d': "hashA 0.2"
    }, {
      'a': "hashA 1.0",
      'b/c': "hashA 1.1",
      'b/e': "hashA 1.2",
      'b/f/g': "hashA 1.3"
    }, {
      'b/e': "hashA 2.0"
    }
  ];

  dataB = [
    {
      'b/h': "hashB 0.0"
    }, {
      'c/a': "hashB 1.0"
    }, {
      'a': "hashB 2.0",
      'u': "hashB 2.1"
    }, {
      'b/c': "hashB 3.0",
      'b/e': "hashB 3.1",
      'b/f/a': "hashB 3.2"
    }
  ];

  before(function(done) {
    return app.listen(testPort, 'localhost', done);
  });

  describe('http-interface', function() {
    describe('blob storage', function() {
      return it('should POST some data and return the hash to GET it', function(done) {
        var data;
        data = {
          data: "some data"
        };
        return req.post(url('/blob')).send(data).end(function(res) {
          var hash;
          hash = res.body.hash;
          return req.get(url('/blob/' + hash)).end(function(res) {
            assert.equal(res.body.data, data.data);
            return done();
          });
        });
      });
    });
    describe('client1', function() {
      it('should do some local commits and POST the diff to the server', function(done) {
        return async.forEach(dataA, (function(each, cb) {
          return client1.branch.commit(each, cb);
        }), function() {
          return client1.branch.delta({}, function(err, delta) {
            return req.post(url('/delta')).send(delta).end(function(res) {
              assert.ok(res.body.ok);
              return done();
            });
          });
        });
      });
      return it('should set its head on the server', function(done) {
        return req.put(url('/head/client1')).send({
          hash: client1.branch.head
        }).end(function(res) {
          return req.get(url('/head/client1')).end(function(res) {
            assert.equal(res.body.hash, client1.branch.head);
            client1.remotes.client1 = res.body.hash;
            return done();
          });
        });
      });
    });
    describe('client2', function() {
      it('should do some commits and push the diff', function(done) {
        return async.forEach(dataB, (function(each, cb) {
          return client2.branch.commit(each, cb);
        }), function() {
          return client2.branch.delta({}, function(err, delta) {
            return req.post(url('/delta')).send(delta).end(function() {
              client2.remotes.client2 = client2.branch.head;
              return done();
            });
          });
        });
      });
      it('should ask for client1\'s head', function(done) {
        return req.get(url('/head/client1')).end(function(res) {
          client2.remotes.client1 = res.body.hash;
          return done();
        });
      });
      it('should ask for the delta to client1 head', function(done) {
        var each, from, to, _ref2;
        _ref2 = (function() {
          var _i, _len, _ref2, _results;
          _ref2 = [[client2.remotes.client2], [client2.remotes.client1]];
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            each = _ref2[_i];
            _results.push(JSON.stringify(each));
          }
          return _results;
        })(), from = _ref2[0], to = _ref2[1];
        return req.get(url('/delta?from=' + from + '&to=' + to)).end(function(res) {
          return client2.repo.applyDelta(res.body, done);
        });
      });
      it('should do a local merge of client1s diff', function(done) {
        var oldHead;
        oldHead = client2.branch.head;
        return client2.branch.merge({
          ref: client2.remotes.client1
        }, function(err, head) {
          return client2.repo._commitStore.read(head, function(err, headObj) {
            assert.equal(difference(headObj.ancestors, [client2.remotes.client1, oldHead]).length, 0);
            return done();
          });
        });
      });
      it('should push its new diff to the server', function(done) {
        return client2.branch.delta({
          from: values(client2.remotes)
        }, function(err, delta) {
          return req.post(url('/delta')).send(delta).end(function() {
            client2.remotes.client2 = client2.branch.head;
            return done();
          });
        });
      });
      return it('should update its head on the server', function(done) {
        return req.put(url('/head/client2')).send({
          hash: client2.branch.head
        }).end(function(res) {
          return done();
        });
      });
    });
    return describe('client1 - step 2', function() {
      it('should ask for client2 head and fetch the delta', function(done) {
        return req.get(url('/head/client2')).end(function(res) {
          var each, from, to, _ref2;
          client1.remotes.client2 = res.body.hash;
          _ref2 = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = [[client1.remotes.client1], [client1.remotes.client2]];
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              each = _ref2[_i];
              _results.push(JSON.stringify(each));
            }
            return _results;
          })(), from = _ref2[0], to = _ref2[1];
          return req.get(url('/delta?from=' + from + '&to=' + to)).end(function(res) {
            return client1.repo.applyDelta(res.body, done);
          });
        });
      });
      it('does a local fast-forward merge', function(done) {
        return client1.branch.merge({
          ref: client1.remotes.client2
        }, function(err, head) {
          assert.equal(head, client1.remotes.client2);
          return done();
        });
      });
      return it('fetches all client heads', function(done) {
        return req.get(url('/head')).end(function(res) {
          assert.equal(res.body.heads[0].name, 'client1');
          return done();
        });
      });
    });
  });

}).call(this);
