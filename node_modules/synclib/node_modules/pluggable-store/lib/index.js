// Generated by CoffeeScript 1.3.3
(function() {
  var PluggableStore, wrapAdapter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  PluggableStore = (function(_super) {

    __extends(PluggableStore, _super);

    function PluggableStore(_arg) {
      this.adapter = _arg.adapter, this.isSync = _arg.isSync;
    }

    PluggableStore.prototype.write = function(key, value, cb) {
      var obj, res, written;
      obj = this;
      written = function() {
        return obj.emit('written', key, value);
      };
      this.emit('write', key, value);
      if (this.isSync) {
        res = this.adapter.write(key, value);
        written();
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.write(key, value, function(err, res) {
          written();
          if (cb) {
            return cb(err, res);
          }
        });
      }
    };

    PluggableStore.prototype.read = function(key, cb) {
      var res;
      this.emit('read', key);
      if (this.isSync) {
        res = this.adapter.read(key);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.read(key, cb);
      }
    };

    PluggableStore.prototype.remove = function(key, cb) {
      return this.adapter.remove(key, cb);
    };

    PluggableStore.prototype.readAll = function(keys, cb) {
      var each, obj, res;
      if (this.isSync) {
        res = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            each = keys[_i];
            _results.push(this.read(each));
          }
          return _results;
        }).call(this);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        obj = this;
        return async.map(keys, (function(each, cb) {
          return obj.read(each, cb);
        }), cb);
      }
    };

    PluggableStore.prototype.writeAll = function(keyValues, cb) {
      var key, obj, res, value;
      if (this.isSync) {
        res = (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = keyValues.length; _i < _len; _i++) {
            _ref = keyValues[_i], key = _ref.key, value = _ref.value;
            _results.push(this.write(key, value));
          }
          return _results;
        }).call(this);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        obj = this;
        return async.map(keyValues, (function(_arg, cb) {
          var key, value;
          key = _arg.key, value = _arg.value;
          return obj.write(key, value, cb);
        }), cb);
      }
    };

    PluggableStore.prototype.removeAll = function(keys, cb) {
      var each, obj, res;
      if (this.isSync) {
        res = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            each = keys[_i];
            _results.push(this.remove(each));
          }
          return _results;
        }).call(this);
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        obj = this;
        return async.map(keys, (function(each, cb) {
          return obj.remove(each, cb);
        }), cb);
      }
    };

    PluggableStore.prototype.keys = function(cb) {
      var res;
      if (this.isSync) {
        res = this.adapter.keys();
        if (cb) {
          return cb(null, res);
        } else {
          return res;
        }
      } else {
        return this.adapter.keys(cb);
      }
    };

    PluggableStore.prototype.pipe = function(toStore) {
      return this.on('write', function(key, value) {
        return toStore.write(key, value);
      });
    };

    return PluggableStore;

  })(require('eventemitter2').EventEmitter2);

  wrapAdapter = function(requireFun, isSync) {
    return function() {
      var adapter, args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      adapter = requireFun();
      return new PluggableStore({
        adapter: (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args), t = typeof result;
          return t == "object" || t == "function" ? result || child : child;
        })(adapter, args, function(){}),
        isSync: isSync
      });
    };
  };

  module.exports = {
    PluggableStore: PluggableStore,
    browser: {
      localStorage: wrapAdapter((function() {
        return require('./localstorage');
      }), true)
    },
    server: {
      fileSystem: wrapAdapter((function() {
        return require('./filesystem');
      }))
    },
    memory: wrapAdapter((function() {
      return require('./memory');
    }), true)
  };

}).call(this);
