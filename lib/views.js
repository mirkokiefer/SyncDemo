// Generated by CoffeeScript 1.3.3
(function() {
  var BaseView, EntryListView, EntryView, List, ListItem, PathView, render, template, _ref;

  render = require('mustache').render;

  _ref = require('backbone-listview'), List = _ref.List, ListItem = _ref.ListItem;

  template = function(templateString) {
    return function(data) {
      return render(templateString, data);
    };
  };

  BaseView = Backbone.View.extend({
    templateData: function() {
      return this.model.toJSON();
    },
    render: function() {
      this.$el.html(this.template(this.templateData()));
      return this;
    }
  });

  PathView = ListItem.extend({
    tagName: 'li',
    template: template('{{path}}')
  });

  EntryView = BaseView.extend({
    template: template('<form>\n  <fieldset>\n    <legend>Note</legend>\n    <input type="text" id="form-path" {{#uneditable}}disabled{{/uneditable}} placeholder="Path" value="{{path}}">\n    <textarea id="form-note" class="input-block-level" rows=5 placeholder="Enter your noteâ€¦">{{value}}</textarea>\n    <span class="help-block"></span>\n    <a class="btn btn-save" href="#">Save</a>\n    <a class="btn btn-delete" href="#">Delete</a>\n  </fieldset>\n</form>'),
    events: {
      'click .btn-save': 'save',
      'click .btn-delete': 'delete'
    },
    save: function() {
      var changedModel;
      changedModel = {
        path: this.$('#form-path').val(),
        value: this.$('#form-note').val()
      };
      return this.trigger('save', changedModel);
    },
    "delete": function() {},
    templateData: function() {
      var data;
      if (this.model) {
        data = this.model.toJSON();
        data.uneditable = true;
        return data;
      } else {
        return {};
      }
    }
  });

  EntryListView = List.extend({
    itemView: PathView
  });

  module.exports = {
    PathView: PathView,
    EntryView: EntryView,
    EntryListView: EntryListView
  };

}).call(this);
