// Generated by CoffeeScript 1.3.3
(function() {
  var Entry, EntryList, EntryListView, EntryView, PathView, Repository, branch, changed, changedEntries, clientName, commitChanges, deltaData, difference, entries, fetchChanges, main, omit, remotes, renderView, repo, resetEntries, trackChanges, _ref, _ref1;

  window.jQuery = window.$ = require('jquery-browserify');

  window.Backbone = require('backbone');

  Backbone.setDomLibrary($);

  _ref = window._ = require('underscore'), omit = _ref.omit, difference = _ref.difference;

  Repository = require('synclib').Repository;

  _ref1 = require('./views'), PathView = _ref1.PathView, EntryView = _ref1.EntryView, EntryListView = _ref1.EntryListView;

  renderView = function(view, selector) {
    return $(selector).html(view.render().el);
  };

  repo = new Repository;

  branch = repo.branch();

  remotes = {};

  clientName = function() {
    return $('#client').val();
  };

  Entry = Backbone.Model.extend({
    idAttribute: 'path'
  });

  EntryList = Backbone.Collection.extend({
    model: Entry
  });

  entries = new EntryList;

  changedEntries = new Backbone.Collection;

  changed = function(model) {
    return changedEntries.add(model);
  };

  trackChanges = function(model) {
    return model.on('change', function() {
      return changed(model);
    });
  };

  resetEntries = function() {
    var data, models;
    data = branch.allPaths();
    models = data.map(function(_arg) {
      var entry, path, value;
      path = _arg.path, value = _arg.value;
      entry = new Entry(JSON.parse(value));
      entry.set(entry.idAttribute, path);
      trackChanges(entry);
      return entry;
    });
    entries.reset(models);
    return entries.add(changedEntries.models);
  };

  deltaData = function() {
    var delta, knownPatch, remote, remoteHead;
    delta = branch.deltaHashs({
      from: remotes.me
    });
    for (remote in remotes) {
      remoteHead = remotes[remote];
      knownPatch = repo.deltaHashs({
        from: remotes.me,
        to: remoteHead
      });
      delta.trees = difference(delta.trees, knownPatch.trees);
      delta.data = difference(delta.data, knownPatch.data);
    }
    return repo.deltaData(delta);
  };

  commitChanges = function() {
    var data, delta, model, _i, _len, _ref2;
    data = {};
    _ref2 = changedEntries.models;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      model = _ref2[_i];
      data[model.id] = JSON.stringify(omit(model.toJSON(), model.idAttribute));
    }
    branch.commit(data);
    changedEntries.reset();
    delta = deltaData();
    console.log('send delta', delta);
    return $.post('/delta', {
      trees: delta.trees
    }, function() {
      remotes.me = branch.head;
      return $.ajax({
        type: 'PUT',
        url: '/head/' + clientName(),
        data: {
          hash: branch.head
        }
      });
    });
  };

  fetchChanges = function() {
    return $.get('/head', function(res) {
      return res.heads.map(function(_arg) {
        var fromString, head, name;
        name = _arg.name, head = _arg.head;
        remotes[name] = head;
        fromString = remotes.me ? 'from=' + remotes.me + '&' : '';
        return $.get('/delta?' + fromString + 'to=' + head, function(res) {
          repo.treeStore.writeAll(res.trees);
          branch.merge({
            ref: head
          });
          resetEntries();
          return console.log('delta from', name, res);
        });
      });
    });
  };

  main = function() {
    var entryListView;
    entries.on('add', function(model) {
      trackChanges(model);
      return changed(model);
    });
    entryListView = new EntryListView({
      collection: entries
    });
    entryListView.on('selected', function(entry) {
      var entryView;
      entryView = new EntryView({
        model: entry
      });
      entryView.on('save', function(newEntry) {
        return entry.set(newEntry);
      });
      return renderView(entryView, '#detail');
    });
    $('#btn-add').click(function() {
      var entryView;
      entryView = new EntryView();
      entryView.on('save', function(newEntry) {
        return entries.add(newEntry);
      });
      return renderView(entryView, '#detail');
    });
    $('#btn-commit').click(function() {
      return commitChanges();
    });
    $('#btn-fetch').click(function() {
      return fetchChanges();
    });
    return renderView(entryListView, '#entries');
  };

  $(main);

}).call(this);
