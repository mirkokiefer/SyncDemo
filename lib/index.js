// Generated by CoffeeScript 1.3.3
(function() {
  var Entry, EntryList, EntryListView, EntryView, PathView, Repository, addTestData, branch, commitModels, entries, main, omit, remotes, renderView, repo, resetEntries, _ref;

  window.jQuery = window.$ = require('jquery-browserify');

  window.Backbone = require('backbone');

  Backbone.setDomLibrary($);

  omit = (window._ = require('underscore')).omit;

  Repository = require('synclib').Repository;

  _ref = require('./views'), PathView = _ref.PathView, EntryView = _ref.EntryView, EntryListView = _ref.EntryListView;

  renderView = function(view, selector) {
    return $(selector).html(view.render().el);
  };

  repo = new Repository;

  branch = repo.branch();

  remotes = {
    me: null
  };

  Entry = Backbone.Model.extend({
    idAttribute: 'path'
  });

  EntryList = Backbone.Collection.extend({
    model: Entry
  });

  entries = new EntryList;

  resetEntries = function() {
    var data, models;
    data = branch.allPaths();
    models = data.map(function(_arg) {
      var entry, path, value;
      path = _arg.path, value = _arg.value;
      entry = new Entry(JSON.parse(value));
      entry.set(entry.idAttribute, path);
      entry.on('change', function() {
        return commitModels([entry]);
      });
      return entry;
    });
    return entries.reset(models);
  };

  commitModels = function(models) {
    var data, delta, model, _i, _len;
    data = {};
    for (_i = 0, _len = models.length; _i < _len; _i++) {
      model = models[_i];
      data[model.id] = JSON.stringify(omit(model.toJSON(), model.idAttribute));
    }
    branch.commit(data);
    console.log(branch.head, data);
    delta = repo.deltaData(branch.deltaHashs({
      from: remotes.me
    }));
    $.post('/delta', {
      trees: delta.trees
    }, function() {
      remotes.me = branch.head;
      $.ajax({
        type: 'PUT',
        url: '/head/' + $('#client').val(),
        data: {
          hash: branch.head
        }
      });
      return $.get('/head', function(res) {
        return res.heads.map(function(_arg) {
          var head, name;
          name = _arg.name, head = _arg.head;
          remotes[name] = head;
          return $.get('/delta?from=' + remotes.me + '&to=' + head, function(res) {
            repo.treeStore.writeAll(res.trees);
            branch.merge({
              ref: head
            });
            resetEntries();
            return console.log(name, res);
          });
        });
      });
    });
    return console.log(delta);
  };

  addTestData = function(branch) {
    var data;
    data = {
      "a/b": JSON.stringify({
        value: "test1"
      }),
      "b": JSON.stringify({
        value: "test2"
      })
    };
    return branch.commit(data);
  };

  main = function() {
    var entryListView;
    addTestData(branch);
    resetEntries();
    entries.on('add', function(model) {
      model.on('change', function() {
        return commitModels([model]);
      });
      return commitModels([model]);
    });
    entryListView = new EntryListView({
      collection: entries
    });
    entryListView.on('selected', function(entry) {
      var entryView;
      entryView = new EntryView({
        model: entry
      });
      entryView.on('save', function(newEntry) {
        return entry.set(newEntry);
      });
      return renderView(entryView, '#detail');
    });
    $('#btn-add').click(function() {
      var entryView;
      entryView = new EntryView();
      entryView.on('save', function(newEntry) {
        return entries.add(newEntry);
      });
      return renderView(entryView, '#detail');
    });
    return renderView(entryListView, '#entries');
  };

  $(main);

}).call(this);
