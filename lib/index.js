// Generated by CoffeeScript 1.3.3
(function() {
  var Entry, EntryList, EntryListView, EntryView, PathView, Repository, SyncClient, async, commitModels, difference, get, init, omit, pluck, post, put, queryName, renderView, resetCollection, values, _ref, _ref1, _ref2;

  window.jQuery = window.$ = require('jquery-browserify');

  window.Backbone = require('backbone');

  async = require('async');

  Backbone.setDomLibrary($);

  _ref = window._ = require('underscore'), omit = _ref.omit, difference = _ref.difference, values = _ref.values, pluck = _ref.pluck;

  Repository = require('synclib').Repository;

  _ref1 = require('./views'), PathView = _ref1.PathView, EntryView = _ref1.EntryView, EntryListView = _ref1.EntryListView;

  _ref2 = require('./utils'), post = _ref2.post, put = _ref2.put, get = _ref2.get;

  Entry = Backbone.Model.extend({
    idAttribute: 'path'
  });

  EntryList = Backbone.Collection.extend({
    model: Entry
  });

  renderView = function(view, selector) {
    return $(selector).html(view.render().el);
  };

  resetCollection = function(collection, branch) {
    return branch.allPaths(function(err, data) {
      var models;
      models = data.map(function(_arg) {
        var entry, path, value;
        path = _arg.path, value = _arg.value;
        entry = JSON.parse(value);
        entry.path = path;
        return entry;
      });
      return collection.reset(models);
    });
  };

  commitModels = function(models, branch, cb) {
    var data, model, _i, _len;
    data = {};
    for (_i = 0, _len = models.length; _i < _len; _i++) {
      model = models[_i];
      data[model.id] = JSON.stringify(omit(model.toJSON(), model.idAttribute));
    }
    return branch.commit(data, cb);
  };

  SyncClient = (function() {

    function SyncClient(_arg) {
      var _ref3;
      _ref3 = _arg != null ? _arg : {}, this.branch = _ref3.branch, this.name = _ref3.name;
      this.remotes = {};
    }

    SyncClient.prototype.fetch = function(cb) {
      var obj;
      obj = this;
      return get('/head', function(err, _arg) {
        var from, heads, to;
        heads = _arg.heads;
        from = JSON.stringify(values(obj.remotes));
        to = JSON.stringify(pluck(heads, 'head'));
        return get('/delta?from=' + from + '&to=' + to, function(err, res) {
          console.log('delta received', res);
          return obj.branch.repo.applyDelta(res, function() {
            var mergeEach;
            mergeEach = function(_arg1, cb) {
              var head, name;
              name = _arg1.name, head = _arg1.head;
              return obj.branch.merge({
                ref: head
              }, function() {
                obj.remotes[name] = head;
                return cb(null);
              });
            };
            return async.forEach(heads, mergeEach, cb);
          });
        });
      });
    };

    SyncClient.prototype.push = function(cb) {
      var obj;
      obj = this;
      return this.branch.delta({
        from: values(this.remotes)
      }, function(err, delta) {
        return post('/delta', delta, function() {
          obj.remotes[obj.name] = obj.branch.head;
          return put('/head/' + obj.name, {
            hash: obj.branch.head
          }, function() {
            return cb(null);
          });
        });
      });
    };

    return SyncClient;

  })();

  init = function(name) {
    var branch, changed, changedEntries, entries, entryListView, repo, syncClient, trackChanges;
    repo = new Repository;
    branch = repo.branch();
    syncClient = new SyncClient({
      branch: branch,
      name: name
    });
    entries = new EntryList;
    changedEntries = new Backbone.Collection;
    changed = function(model) {
      return changedEntries.add(model);
    };
    trackChanges = function(model) {
      return model.on('change', function() {
        return changed(model);
      });
    };
    entries.on('reset', function() {
      var each, _i, _len, _ref3, _results;
      _ref3 = entries.models;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        each = _ref3[_i];
        _results.push(trackChanges(each));
      }
      return _results;
    });
    entries.on('add', function(model) {
      trackChanges(model);
      return changed(model);
    });
    entryListView = new EntryListView({
      collection: entries
    });
    entryListView.on('selected', function(entry) {
      var entryView;
      entryView = new EntryView({
        model: entry
      });
      entryView.on('save', function(newEntry) {
        return entry.set(newEntry);
      });
      return renderView(entryView, '#detail');
    });
    $('#btn-add').click(function() {
      var entryView;
      entryView = new EntryView();
      entryView.on('save', function(newEntry) {
        return entries.add(newEntry);
      });
      return renderView(entryView, '#detail');
    });
    $('#btn-commit').click(function() {
      return commitModels(changedEntries.models, branch, function() {
        return changedEntries.reset();
      });
    });
    $('#btn-push').click(function() {
      return syncClient.push(function() {});
    });
    $('#btn-fetch').click(function() {
      return syncClient.fetch(function() {
        return resetCollection(entries, branch);
      });
    });
    return renderView(entryListView, '#entries');
  };

  queryName = function(cb) {
    $('#setup-modal').modal({
      backdrop: 'static',
      keyboard: false
    });
    return $('#setup-modal .submit').click(function() {
      $('#setup-modal').modal('hide');
      return cb(null, $('#setup-client').val());
    });
  };

  $(function() {
    return queryName(function(err, name) {
      $('#client-name').text(name);
      return init(name);
    });
  });

}).call(this);
